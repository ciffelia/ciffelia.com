<div class="container in-view-effect">
  <div class="content-wrapper">
    <slot />
  </div>
  <div class="cover cover1"></div>
  <div class="cover cover2"></div>
</div>

<script>
  const observer = new IntersectionObserver(
    (entries) => {
      for (const entry of entries) {
        if (entry.isIntersecting) {
          (entry.target as HTMLDivElement).style.setProperty(
            "--playState",
            "running",
          );
          observer.unobserve(entry.target);
        }
      }
    },
    { threshold: 0.3 },
  );

  for (const el of document.querySelectorAll(".in-view-effect")) {
    observer.observe(el);
  }
</script>

<style>
  .container {
    position: relative;
    height: 100%;
  }

  .in-view-effect {
    --playState: paused;
  }

  .content-wrapper {
    height: 100%;
    animation: in-view-content-wrapper 1s 0s both;
    animation-play-state: var(--playState);
  }

  .cover {
    position: absolute;
    inset: 0;
    pointer-events: none;
  }

  .cover1 {
    background-color: var(--color-cover1);
    animation:
      in-view-cover1 var(--easing-ease-in-expo) 1s 0s backwards,
      in-view-cover2 var(--easing-ease-out-expo) 0.5s 0.5s forwards;
    animation-play-state: var(--playState);
  }

  .cover2 {
    background-color: var(--color-cover2);
    animation:
      in-view-cover1 var(--easing-ease-in-expo) 0.25s 0.25s backwards,
      in-view-cover2 var(--easing-ease-out-expo) 0.25s 0.5s forwards;
    animation-play-state: var(--playState);
  }

  @keyframes in-view-content-wrapper {
    0% {
      visibility: hidden;
    }

    49% {
      visibility: hidden;
    }
  }

  @keyframes in-view-cover1 {
    0% {
      transform: scaleX(0);
      transform-origin: left;
    }

    100% {
      transform: scaleX(1);
      transform-origin: left;
    }
  }

  @keyframes in-view-cover2 {
    0% {
      transform: scaleX(1);
      transform-origin: right;
    }

    100% {
      transform: scaleX(0);
      transform-origin: right;
    }
  }
</style>
